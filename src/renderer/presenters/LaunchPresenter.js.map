{"version":3,"file":"LaunchPresenter.js","sourceRoot":"","sources":["LaunchPresenter.ts"],"names":[],"mappings":";;AAEA,6DAAsE;AACtE,gDAA2C;AAE3C,oDAA+C;AAG/C,MAAa,eAAe;IAMxB,YAAY,IAAgB;QACxB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,MAAM,WAAW,GAAG,IAAI,yBAAW,CAAC,0EAA0E,CAAC,CAAC;QAChH,IAAI,CAAC,KAAK,GAAG,IAAI,+BAAc,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,mBAAQ,CAAC,WAAW,EAAE,CAAC;QAC1C,gDAAgD;QAChD,mBAAQ,CAAC,gBAAgB,EAAE,CAAC;IAChC,CAAC;IAEM,SAAS;QACZ,gCAAgC;QAChC,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAEM,QAAQ;QACX,8EAA8E;QAC9E,+EAA+E;QAC/E,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;IAC3B,CAAC;IAEM,SAAS;QACZ,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC;IAEM,WAAW;QACd,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAEM,UAAU;QACb,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;IAC3B,CAAC;IAEM,oBAAoB,CAAC,IAAgB;QACxC,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACrD,IAAI,MAAM,EAAE;YACR,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACxB;IACL,CAAC;IAEM,cAAc;QACjB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAC3D,MAAM,SAAS,GAAiB,EAAE,CAAC;QACnC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC1D,MAAM,GAAG,GAAG,mBAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACrF,SAAS,CAAC,IAAI,CAAC;gBACX,YAAY,EAAE,MAAM,CAAC,EAAE;gBACvB,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,SAAS;gBAC7B,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;aAC5B,CAAC,CAAC;SACN;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC9B,CAAC;IAEO,aAAa,CAAC,EAAU;QAC5B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,IAAI,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE;gBAClB,OAAO,MAAM,CAAC;aACjB;SACJ;QACD,OAAO,IAAI,CAAC;IAEhB,CAAC;IAEO,oBAAoB;QACxB,IAAI,CAAC,WAAW,GAAG,mBAAQ,CAAC,WAAW,EAAE,CAAC;IAC9C,CAAC;CACJ;AA7ED,0CA6EC","sourcesContent":["import {LaunchView} from \"../views/LaunchView\";\nimport {LaunchItem} from \"../views/LaunchListView\";\nimport {ResourceSearch, SearchResult} from \"../models/ResourceSearch\";\nimport {DataManager} from \"../DataManager\";\nimport {Resource} from \"../models/Resource\";\nimport {Platform} from \"../../common/Platform\";\nimport * as desktop from \"desktop-native\";\n\nexport class LaunchPresenter {\n    private readonly view: LaunchView;\n    private readonly model: ResourceSearch;\n    private results: SearchResult<Resource>[];\n    private openWindows: desktop.Window[];\n\n    constructor(view: LaunchView) {\n        this.results = [];\n        this.view = view;\n        const dataManager = new DataManager(\"/home/ncbradley/.local/share/activitywatch/aw-server/peewee-sqlite.v2.db\");\n        this.model = new ResourceSearch(dataManager);\n        this.openWindows = Platform.listWindows();\n        // query and cache info about apps on the system\n        Platform.listApplications();\n    }\n\n    public onVisible(): void {\n        // Force launch items to refresh\n        this.onInputChanged();\n        this.updateOpenWindowList();\n    }\n\n    public onHidden(): void {\n        // Blank the view to avoid refresh artifacts when the launcher is shown again.\n        // Note: clearInput() does not invoke onInputChanged() saving a database query.\n        this.view.clearInput();\n        this.view.clearItems();\n    }\n\n    public onArrowUp(): void {\n        this.view.focusPrevious();\n    }\n\n    public onArrowDown(): void {\n        this.view.focusNext();\n    }\n\n    public onOtherKey(): void {\n        this.view.focusInput();\n    }\n\n    public onLaunchItemSelected(item: LaunchItem): void {\n        const result = this.getResultById(item.displayOrder);\n        if (result) {\n            result.record.open();\n        }\n    }\n\n    public onInputChanged(): void {\n        const input = this.view.input.value;\n        this.results = this.model.execute(this.openWindows, input);\n        const viewItems: LaunchItem[] = [];\n        for (const result of this.results) {\n            console.log(\"looking for appName\", result.record.appName);\n            const app = Platform.appCache.filter((app) => app.name === result.record.appName)[0];\n            viewItems.push({\n                displayOrder: result.id,\n                text: result.record.reference,\n                icon: app ? app.icon : \"\",\n            });\n        }\n        this.view.bind(viewItems);\n    }\n\n    private getResultById(id: number): SearchResult<Resource> | null {\n        for (const result of this.results) {\n            if (result.id === id) {\n                return result;\n            }\n        }\n        return null;\n\n    }\n\n    private updateOpenWindowList(): void {\n        this.openWindows = Platform.listWindows();\n    }\n}"]}